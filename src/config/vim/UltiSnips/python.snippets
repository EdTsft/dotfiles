snippet newscript "New python script template." b
#!/usr/bin/env python
"""${1:TODO: Program description.}"""
import argparse
import shutil
import sys


def parse_args(args=None):
    """Parse command-line arguments.

    Args:
        args: A list of argument strings to use instead of sys.argv.

    Returns:
        An \`argparse.Namespace\` object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description=__doc__.splitlines()[0] if __doc__ else None,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    return parser.parse_args(args)


def main(args=None):
    """Run script.

    Args:
        args: A list of argument strings to use instead of sys.argv.
    """
    args = parse_args(args)
    ${2}

if __name__ == '__main__':
    try:
        _np = sys.modules["numpy"]
    except KeyError:
        pass
    else:
        _np.set_printoptions(linewidth=shutil.get_terminal_size().columns)
    main()
endsnippet

snippet setup "Package setup script"
"""Package setup script."""
import setuptools

try:
    with open("README.md", "r") as f:
        long_description = f.read()
except FileNotFoundError:
    long_description = None

setuptools.setup(
    name="${1:pkg-name}",
    version="0.1.0",
    author="${2:Author Name}",
    author_email="${3:author@example.com}",
    description="${4:A small example description.}",
    long_description=long_description,
    long_description_content_type="text/markdown",
    packages=setuptools.find_packages(),
    install_requires=[],
    classifiers=[
        "Programming Language :: Python :: 3",
        "Operating System :: OS Independent",
#        "License :: OSI Approved :: MIT License",
    ],
    python_requires=">=3.7",
)
endsnippet

snippet timefile "Timestamp string useable as a file name."
time.strftime('%Y.%m.%d-%H.%M.%S')
endsnippet

snippet tfprint "Tensorflow print op."
${5:$1} = tf.Print(${1}, [${2:$1}], '${3:$2}', summarize=${4:100})
endsnippet

snippet log "Define a logger." b
logger = logging.getLogger(__name__)
endsnippet

# Arguments
snippet iarg "Add integer argument." w
add_argument('--${1:name}', default=${2:0}, type=int,
             help='${3}')
endsnippet

snippet farg "Add float argument." w
add_argument('--${1:name}', default=${2:0}, type=float,
             help='${3}')
endsnippet

snippet sarg "Add string argument." w
add_argument('--${1:name}', default=${2:0}, type=str,
             help='${3}')
endsnippet

snippet barg "Add boolean (store true) argument." w
add_argument('--${1:name}', action='store_true',
             help='${2}')
endsnippet

snippet bfarg "Add boolean (store false) argument." w
add_argument('--no-${1:name}', action='store_false',
             dest='${3:$1}',
             help='${2}')
endsnippet

# Imports
snippet iplt "Import matplotlib.pyplot." b
import matplotlib.pyplot as plt
endsnippet

snippet inp "Import numpy." b
import numpy as np
endsnippet

snippet isns "Import seaborn." b
import seaborn as sns
endsnippet

snippet ipm "Import pymc3." b
import pymc3 as pm
endsnippet

snippet ipd "Import pandas." b
import pandas as pd
endsnippet
