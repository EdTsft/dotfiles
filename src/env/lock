#!/bin/bash
set -eu
# shellcheck source=env_utils
source "${BASH_SOURCE%/*}/env_utils"

MANUAL_LOCK_CMD=""
ENABLE_LOCKER_CMD=""

# Prefer xscreensaver if present
if XSCREENSAVER="$(command -v xscreensaver 2>/dev/null)"; then
	if command -v xdg-screensaver >/dev/null 2>&1; then
		MANUAL_LOCK_CMD="xdg-screensaver lock"
	else
		MANUAL_LOCK_CMD="xscreensaver-command -l"
	fi
	ENABLE_LOCKER_CMD="$XSCREENSAVER -nosplash"
	echo "MANUAL_LOCK_CMD=$MANUAL_LOCK_CMD"
	echo "ENABLE_LOCKER_CMD=$ENABLE_LOCKER_CMD"
	exit 0
fi

# Otherwise use xsecurelock
if XSECURELOCK="$(command -v xsecurelock 2>/dev/null)"; then
	LOCK_CMD="$XSECURELOCK"
	MANUAL_LOCK_CMD="$LOCK_CMD"
	if [ -f "/usr/lib/xsecurelock/dimmer" ]; then
		DIMMER="/usr/lib/xsecurelock/dimmer"
	else
		DIMMER=""
	fi
fi

if XSS_LOCK="$(command -v xss-lock 2>/dev/null)"; then
	XSS_ARGS=()
	if [ -n "$DIMMER" ]; then
		XSS_ARGS+=('-n' "$DIMMER")
	fi

	# WARNING: This doesn't quote the arguments in XSS_ARGS
	# If any contain spaces they will be treated as multiple arguments.
	ENABLE_LOCKER_CMD="$XSS_LOCK ${XSS_ARGS[*]} -l -- $LOCK_CMD"
	# XSS LOCK watches for screen suspend and triggers a lock
	MANUAL_LOCK_CMD="xset dpms force suspend"
fi

if [ -n "$MANUAL_LOCK_CMD" ]; then
	echo "MANUAL_LOCK_CMD=$MANUAL_LOCK_CMD"
fi
if [ -n "$ENABLE_LOCKER_CMD" ]; then
	echo "ENABLE_LOCKER_CMD=$ENABLE_LOCKER_CMD"
fi
