#!/usr/bin/env python
"""Convert CSV input to YAML"""
from __future__ import annotations

import argparse
import csv
import pathlib
import shutil
import sys
from typing import Iterable, Optional, Sequence

import pygments
import pygments.formatters
import pygments.lexers.data
import yaml


def parse_args(argv: Optional[Sequence[str]] = None) -> argparse.Namespace:
    """Parse command-line arguments.

    Args:
        argv: A list of argument strings to use instead of sys.argv.

    Returns:
        An `argparse.Namespace` object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description=__doc__.splitlines()[0] if __doc__ else None,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "file",
        nargs="?",
        type=pathlib.Path,
        help="Input file. Reads from stdin if omitted.",
    )
    return parser.parse_args(argv)


def write_yaml(csv_lines: Iterable[str]) -> None:
    highlight = sys.stdout.isatty()

    for line_dict in csv.DictReader(csv_lines):
        output = yaml.dump(line_dict, width=float("inf"), explicit_end=True)
        if highlight:
            output = pygments.highlight(
                output,
                pygments.lexers.data.YamlLexer(),
                formatter=pygments.formatters.Terminal256Formatter(),
            )
        sys.stdout.write(output)


def main(argv: Optional[Sequence[str]] = None) -> None:
    """Run script.

    Args:
        argv: A list of argument strings to use instead of sys.argv.
    """
    args = parse_args(argv)
    if args.file:
        with open(args.file, "r", newline="") as f:
            write_yaml(f)
    else:
        write_yaml(sys.stdin)


if __name__ == "__main__":
    try:
        _np = sys.modules["numpy"]
    except KeyError:
        pass
    else:
        _np.set_printoptions(  # type: ignore
            linewidth=shutil.get_terminal_size().columns
        )
    main()
