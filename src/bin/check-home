#!/usr/bin/env python
"""Check home directory for unwanted configuration files."""
from __future__ import annotations

import argparse
import enum
import pathlib
import shutil
import sys
from typing import Optional, Sequence

from termcolor import colored


def parse_args(argv: Optional[Sequence[str]] = None) -> argparse.Namespace:
    """Parse command-line arguments.

    Args:
        argv: A list of argument strings to use instead of sys.argv.

    Returns:
        An `argparse.Namespace` object containing the parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description=__doc__.splitlines()[0] if __doc__ else None,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    return parser.parse_args(argv)


class Status(enum.Enum):
    APPROVED = 1
    APPROVED_SYMLINK = 2  # Approved iff it is a symbolic link
    TOLERATED = 3
    TOLERATED_SYMLINK = 4  # Tolerated iff it is a symbolic link
    TO_INVESTIGATE = 5
    REMOVE = 6  # Delete on sight
    UNKNOWN = 7


# NOTE:
# It is possible to watch for file creation in $HOME with the following command:
# inotifywait -m -e create ~/

KNOWN_FILES = {
    ".bash_profile": Status.TOLERATED_SYMLINK,
    ".bashrc": Status.TOLERATED_SYMLINK,
    ".cache": Status.APPROVED,
    ".config": Status.APPROVED,
    ".duplicacy": Status.TOLERATED,
    ".duplicacy-web": Status.TOLERATED_SYMLINK,
    ".ecryptfs": Status.APPROVED,
    ".elinks": Status.REMOVE,  # Possible to relocate with env var
    ".ghc": Status.REMOVE,
    ".grip": Status.REMOVE,  # Fixed with env var
    ".java": Status.REMOVE,  # Possible to relocate with env var
    ".keras": Status.REMOVE,  # https://github.com/keras-team/keras/issues/14186
    ".local": Status.APPROVED,
    ".mozilla": Status.TOLERATED_SYMLINK,
    ".oracle_jre_usage": Status.REMOVE,
    ".pam_environment": Status.APPROVED_SYMLINK,
    ".paradoxlauncher": Status.TOLERATED_SYMLINK,
    ".pki": Status.TO_INVESTIGATE,  # Supposedly fixed but keeps reappearing. Delete OK
    ".Private": Status.APPROVED,
    ".profile": Status.APPROVED_SYMLINK,
    ".pulse-cookie": Status.TO_INVESTIGATE,  # Who's responsible?
    ".ssh": Status.APPROVED,
    ".steam": Status.TOLERATED,
    ".steampath": Status.TOLERATED_SYMLINK,
    ".steampid": Status.TOLERATED_SYMLINK,
    ".thumbnails": Status.REMOVE,  # I can't figure out what's making this
    ".thunderbird": Status.TOLERATED_SYMLINK,
    ".xournalpp": Status.REMOVE,  # https://github.com/xournalpp/xournalpp/pull/1384
    ".xprofile": Status.APPROVED_SYMLINK,
    ".zotero": Status.TOLERATED_SYMLINK,
}


def main(argv: Optional[Sequence[str]] = None) -> None:
    """Run script.

    Args:
        argv: A list of argument strings to use instead of sys.argv.
    """
    args = parse_args(argv)
    del args

    home = pathlib.Path.home()
    for file in sorted(home.iterdir()):
        name = file.name
        if not name.startswith("."):
            continue
        status = KNOWN_FILES.get(name, Status.UNKNOWN)
        if status == Status.APPROVED:
            print(name, ":", colored("OK", "green"))
        elif status == Status.APPROVED_SYMLINK:
            if file.is_symlink():
                print(name, ":", colored("OK", "green"))
            else:
                print(name, ":", colored("not symlink", "red"))
        elif status == Status.TOLERATED:
            print(name, ":", colored("tolerated", "green"))
        elif status == Status.TOLERATED_SYMLINK:
            if file.is_symlink():
                print(name, ":", colored("tolerated", "green"))
            else:
                print(name, ":", colored("not symlink", "red"))
        elif status == Status.TO_INVESTIGATE:
            print(name, ":", colored("investigation required", "yellow"))
        elif status == Status.REMOVE:
            print(name, ":", colored("remove", "red"))
        elif status == Status.UNKNOWN:
            print(name, ":", colored("unknown", "magenta"))
        else:
            assert False, "Invalid status"


if __name__ == "__main__":
    try:
        _np = sys.modules["numpy"]
    except KeyError:
        pass
    else:
        _np.set_printoptions(  # type: ignore
            linewidth=shutil.get_terminal_size().columns
        )
    main()
